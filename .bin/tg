#! /usr/bin/env node
const TG = require('../index');
const ARGS = process.argv; // TEST: ['-', '-', 'CMD']
let subcmd;


function done(err) {
	err && console.error('ERROR:', err);
	console.timeEnd('[Done]');
}


async function load(args) {
	var global = global || {};
	global.tgconfig = await TG.config();
	var cmd = (args[2] || '').replace(/-{2,}/g, '');
	var arg = [];
	for (let i = 3; i < args.length; i++)
		arg.push(args[i].trim().replace(/"/g, ''));

	//handle command generate
	if (cmd.indexOf(':') > -1) {

		let split = cmd.split(':');
		if (split.length < 2) {
			console.error('Invalid command format. Use "command:subcommand"');
			return done();
		}
		cmd = split[0].trim();
		subcmd = split[1].trim();
	
		if (!cmd)
			cmd = 'help';

		console.log('* Total Gen: [' + cmd.capitalize() + ']');
		console.time('[Done]');
		const params = subcmd ? [subcmd, ...arg] : arg; 
		var fn = FUNC[cmd];
		fn && fn.apply(global, params);
	}
}


FUNC.help = function() {
	console.log('init                                   	: Initialize Total Gen');
	console.log('generate                                   : Generate code templates');
	done();
};

FUNC.generate = function() {
	let args = Array.from(arguments).slice(1);
	console.log(args);
	// handle sub help
	if (subcmd === 'help') {
		console.log('Usage: tg generate:<subcommand> [options]');
		console.log('Subcommands:');
		console.log('generate:resource   : Generate a resource template');
		console.log('generate:migration  : Generate a migration template');
		done();
		return;
	}
	if (!subcmd) {
		console.error('Please specify a subcommand for "generate".');
		return done();
	}

	switch (subcmd) {
		case 'resource':
			TG.resource(args);
			break;
		case 'migration':
			TG.createmigration(args);
			break;
		default:
			console.error('Unknown subcommand:', subcmd);
			break;
	}

	done();
}

FUNC.init = function() {
	console.log('Initializing Total Gen...');
	TG.tginit().then(() => {
		console.log('Total Gen initialized successfully.');
		done();
	}).catch(err => {
		console.error('Error initializing Total Gen:', err);
		done(err);
	});
};

FUNC.migrate = function() {
	TG.migrate();
}

setTimeout(load, 10, ARGS);
